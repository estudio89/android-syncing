// Code generated by dagger-compiler.  Do not edit.
package br.com.estudio89.syncing;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DataSyncHelper>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DataSyncHelper} and its
 * dependencies.
 *
 * Being a {@code Provider<DataSyncHelper>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<DataSyncHelper>} and handling injection
 * of annotated fields.
 */
public final class DataSyncHelper$$InjectAdapter extends Binding<DataSyncHelper>
    implements Provider<DataSyncHelper>, MembersInjector<DataSyncHelper> {
  private Binding<android.content.Context> appContext;
  private Binding<br.com.estudio89.syncing.bus.AsyncBus> bus;
  private Binding<SyncConfig> syncConfig;
  private Binding<ServerComm> serverComm;
  private Binding<CustomTransactionManager> transactionManager;
  private Binding<ThreadChecker> threadChecker;

  public DataSyncHelper$$InjectAdapter() {
    super("br.com.estudio89.syncing.DataSyncHelper", "members/br.com.estudio89.syncing.DataSyncHelper", NOT_SINGLETON, DataSyncHelper.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    appContext = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", DataSyncHelper.class, getClass().getClassLoader());
    bus = (Binding<br.com.estudio89.syncing.bus.AsyncBus>) linker.requestBinding("br.com.estudio89.syncing.bus.AsyncBus", DataSyncHelper.class, getClass().getClassLoader());
    syncConfig = (Binding<SyncConfig>) linker.requestBinding("br.com.estudio89.syncing.SyncConfig", DataSyncHelper.class, getClass().getClassLoader());
    serverComm = (Binding<ServerComm>) linker.requestBinding("br.com.estudio89.syncing.ServerComm", DataSyncHelper.class, getClass().getClassLoader());
    transactionManager = (Binding<CustomTransactionManager>) linker.requestBinding("br.com.estudio89.syncing.CustomTransactionManager", DataSyncHelper.class, getClass().getClassLoader());
    threadChecker = (Binding<ThreadChecker>) linker.requestBinding("br.com.estudio89.syncing.ThreadChecker", DataSyncHelper.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(appContext);
    injectMembersBindings.add(bus);
    injectMembersBindings.add(syncConfig);
    injectMembersBindings.add(serverComm);
    injectMembersBindings.add(transactionManager);
    injectMembersBindings.add(threadChecker);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DataSyncHelper>}.
   */
  @Override
  public DataSyncHelper get() {
    DataSyncHelper result = new DataSyncHelper();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<DataSyncHelper>}.
   */
  @Override
  public void injectMembers(DataSyncHelper object) {
    object.appContext = appContext.get();
    object.bus = bus.get();
    object.syncConfig = syncConfig.get();
    object.serverComm = serverComm.get();
    object.transactionManager = transactionManager.get();
    object.threadChecker = threadChecker.get();
  }

}
